name: distributed-transactions-practice

volumes:
  db-data:
    driver: local

services:
  postgres:
    image: postgres:17.0
    ports:
      - "5000:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    command: postgres -c max_prepared_transactions=100
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - 7070:8080
    volumes:
      - ./kafka-ui/config.yaml:/etc/kafka-ui/dynamic_config.yaml
    environment:
      KAFKA_CLUSTERS_0_NAME: orders
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:19092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9992
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka-1
  kafka-1:
    image: apache/kafka:3.9.1
    hostname: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka-1:19092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_JMX_PORT: 9992
      KAFKA_JMX_HOSTNAME: kafka-1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_SHARE_COORDINATOR_STATE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SHARE_COORDINATOR_STATE_TOPIC_MIN_ISR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  prometheus:
    image: prom/prometheus:v3.5.0
    ports:
      - "9090:9090"
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:z'
#    network_mode: host
#  grafana-alloy-otel-collector:
#    image: grafana/alloy:v1.10.2
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.133.0
    volumes:
      - ./otel-collector/config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
#      - 1888:1888 # pprof extension
#      - 8888:8888 # Prometheus metrics exposed by the Collector
#      - 8889:8889 # Prometheus exporter metrics
#      - 13133:13133 # health_check extension
#      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
#      - 55679:55679 # zpages extension
  tempo_init:
    image: &tempoImage grafana/tempo:main-83ee62c
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - 3200:3200
      - 4316:4317
    depends_on:
      - tempo_init
  grafana:
    image: grafana/grafana:12.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_BASIC_ENABLED: false
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor

