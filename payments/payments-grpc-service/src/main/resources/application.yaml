debug: true
logging:
  level:
    root: INFO
    io:
      github:
        m4gshm: TRACE
      r2dbc:
        postgresql:
          QUERY: DEBUG
    java:
      io:
        serialization: INFO
    sun:
      rmi: INFO
    javax:
      management: INFO
#spring:
#  grpc:
#    server:
#      port: 9090
server:
  port: 7082
  error:
    include-message: always
grpc:
  server:
    port: 9082
    channelz:
      enabled: false
    health:
      enabled: false #conflict with spring.grpc.server.health.enabled
    reflection:
      enabled: false
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
  use-fqn: true  # Use fully qualified names for better clarity

spring:
  #for liquibase
  datasource:
    url: jdbc:postgresql://localhost:5000/payments
    username: postgres
    password: postgres
  r2dbc:
    url: r2dbc:postgresql://localhost:5000/payments
    username: postgres
    password: postgres
  liquibase:
    enabled: true
  kafka:
    bootstrap-servers:
      - localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonDeserializer

#spring.kafka.consumer.group-id: payments
#spring.kafka.consumer.auto-offset-reset: earliest
#spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
# json deserializer config
#spring.kafka.properties.spring.json.trusted.packages: *
#spring.kafka.consumer.properties.spring.json.use.type.headers: false
#spring.kafka.consumer.properties.spring.json.value.default.type: com.example.reactivekafkaconsumerandproducer.dto.FakeConsumerDTO