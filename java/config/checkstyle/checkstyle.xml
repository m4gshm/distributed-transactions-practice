<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>

    <module name="FileTabCharacter"/>
    <module name="RegexpSingleline">
        <property name="format" value="&lt;&lt;&lt;&lt;&lt;&lt;&lt;"/>
        <property name="message"
                  value="Found (&lt;&lt;&lt;&lt;&lt;&lt;&lt;), so it looks like you had a merge conflict that compiles. Please fix it."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="&gt;&gt;&gt;&gt;&gt;&gt;&gt;"/>
        <property name="message"
                  value="Found (&gt;&gt;&gt;&gt;&gt;&gt;&gt;), so it looks like you had a merge conflict that compiles. Please fix it."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Whitespace at end-of-line"/>
    </module>
    <module name="RegexpMultiline">
        <property name="fileExtensions" value="java"/>
        <property name="format" value="^\n\n$"/>
        <property name="message" value="Two consecutive blank lines are not permitted."/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/checkstyle-suppressions.xml"/>
    </module>
    <module name="SuppressionFilter">

        <property name="file" value="${config_loc}/custom-suppressions.xml"/>
        <property name="optional" value="true"/>
    </module>
    <module name="SuppressWarningsFilter"/>
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>
    <module name="LineLength">
        <property name="max" value="200"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://|\{@link"/>
    </module>
    <module name="TreeWalker">
        <module name="SuppressionCommentFilter"/>
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
            <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
            <property name="checkFormat" value="$1"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="4"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="AnnotationUseStyle">
            <property name="trailingArrayComma" value="ignore"/>
        </module>
        <module name="ArrayTypeStyle"/>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
                                        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CovariantEquals"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="IMPORT, CLASS_DEF, ENUM_DEF, INTERFACE_DEF, CTOR_DEF, STATIC_INIT, INSTANCE_INIT, VARIABLE_DEF"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="FallThrough"/>
        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="HideUtilityClassConstructor">
            <property name="ignoreAnnotatedBy" value="UtilityClass,SpringBootApplication"/>
        </module>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="junit.framework"/>
            <message key="import.illegal"
                     value="Use JUnit 4-style (org.junit.*) test classes and assertions instead of JUnit 3 (junit.framework.*)."/>
        </module>
        <module name="IllegalImport">
            <property name="id" value="BanJavafx"/>
            <property name="illegalPkgs" value="javafx"/>
            <message key="import.illegal"
                     value="Must not import javafx classes because some OpenJDK builds do not include javafx."/>
        </module>
        <module name="IllegalImport">
            <property name="illegalPkgs"
                      value="org.elasticsearch.common.base, com.clearspring.analytics.util, org.spark_project.guava"/>
            <message key="import.illegal" value="Must not import repackaged classes."/>
        </module>
        <module name="IllegalImport">
            <property name="id" value="BanShadedClasses"/>
            <property name="illegalPkgs" value=".*\.(repackaged|shaded|thirdparty)"/>
            <property name="regexp" value="true"/>
            <message key="import.illegal" value="Must not import repackaged classes."/>
        </module>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="^org\.gradle\.(internal|.*\.internal)"/>
            <property name="regexp" value="true"/>
            <message key="import.illegal"
                     value="Do not rely on gradle internal classes as these may change in minor releases - use org.gradle.api versions instead."/>
        </module>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun"/>
            <message key="import.illegal"
                     value="Must not use Oracle's Java implementation details. See http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html ."/>
        </module>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="org.apache.commons.lang"/>
            <message key="import.illegal" value="lang is deprecated, use lang3 instead."/>
        </module>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="org.apache.commons.math"/>
            <message key="import.illegal" value="math is deprecated, use math3 instead."/>
        </module>
        <module name="IllegalImport">
            <property name="id" value="BanLoggingImplementations"/>
            <property name="illegalPkgs"
                      value="org.apache.log4j, org.apache.logging.log4j, java.util.logging, ch.qos.logback"/>
            <message key="import.illegal" value="Use SLF4J instead of a logging framework directly."/>
        </module>
        <module name="IllegalImport">
            <property name="illegalClasses" value="com.google.common.base.Optional, com.google.common.base.Supplier"/>
            <message key="import.illegal" value="Use the Java8 version of Guava objects."/>
        </module>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
            <property name="classes" value="java.lang.Byte"/>
            <property name="classes" value="java.lang.Character"/>
            <property name="classes" value="java.lang.Double"/>
            <property name="classes" value="java.lang.Float"/>
            <property name="classes" value="java.lang.Integer"/>
            <property name="classes" value="java.lang.Long"/>
        </module>
        <module name="IllegalThrows"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="IllegalType">
            <property name="illegalClassNames"
                      value="java.util.ArrayList, java.util.HashSet, java.util.HashMap, java.util.LinkedList, java.util.LinkedHashMap, java.util.LinkedHashSet, java.util.TreeSet, java.util.TreeMap, com.google.common.collect.ArrayListMultimap, com.google.common.collect.ForwardingListMultimap, com.google.common.collect.ForwardingMultimap, com.google.common.collect.ForwardingSetMultimap, com.google.common.collect.ForwardingSortedSetMultimap, com.google.common.collect.HashMultimap, com.google.common.collect.LinkedHashMultimap, com.google.common.collect.LinkedListMultimap, com.google.common.collect.TreeMultimap"/>
            <message key="illegal.type"
                     value="Usage of type ''{0}'' is not allowed to limit coupling on concrete classes. For example, prefer Multimap over HashMultimap, List over ArrayList, and Set over TreeSet."/>
        </module>
        <module name="IllegalType">
            <property name="id" value="BanGuavaCaches"/>
            <property name="illegalClassNames"
                      value="com.google.common.cache.CacheBuilder, com.google.common.cache.Cache, com.google.common.cache.LoadingCache"/>
            <message key="illegal.type"
                     value="Do not use Guava caches, they are outperformed by and harder to use than Caffeine caches"/>
        </module>
                                                                                        <module name="InnerAssignment"/>
        <module name="LeftCurly"/>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]+$"/>
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9_]+$"/>
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodParamPad"/>
        <module name="MissingDeprecated"/>
        <module name="ModifiedControlVariable"/>
        <module name="ModifierOrder"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="MutableException"/>
        <module name="NeedBraces"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="NoLineWrap"/>
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="OneTopLevelClass"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="OuterTypeFilename"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageAnnotation"/>
        <module name="PackageDeclaration"/>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterAssignment"/>
        <module name="ParenPad"/>
        <module name="RedundantImport"/>
        <module name="RedundantModifier"/>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertEquals\(false,"/>
            <property name="message" value="Use assertFalse() instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertEquals\(null,"/>
            <property name="message" value="Use assertNull() instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertEquals\(true,"/>
            <property name="message" value="Use assertTrue() instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertFalse\(.*[!=]="/>
            <property name="message"
                      value="Use better assertion method(s): assertEquals(), assertNull(), assertSame(), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertTrue\(!"/>
            <property name="message" value="Use assertFalse()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertTrue\(.*[!=]="/>
            <property name="message"
                      value="Use better assertion method(s): assertEquals(), assertNull(), assertSame(), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Collections\.EMPTY_LIST"/>
            <property name="message" value="Use Collections.emptyList() or, better, ImmutableList.of()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Collections\.EMPTY_MAP"/>
            <property name="message" value="Use Collections.emptyMap() or, better, ImmutableMap.of()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Collections\.EMPTY_SET"/>
            <property name="message" value="Use Collections.emptySet() or, better, ImmutableSet.of()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="CoreMatchers\.equalTo"/>
            <property name="message" value="Use Assert.assertEquals()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="BanJacksonFindAndRegisterModulesMethod"/>
            <property name="format" value="findAndRegisterModules"/>
            <property name="message"
                      value="Use ObjectMapper#registerModule(&lt;yourModule&gt;) explicitly. ObjectMapper#findAndRegisterModules() is dangerous because it will change behaviour depending on which modules are on your classpath (including transitive dependencies)."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="CoreMatchers\.notNull"/>
            <property name="message"
                      value="Use better assertion method(s): Assert.assertEquals(), assertNull(), assertSame(), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="ImmutableList\.Builder.*new ImmutableList\.Builder"/>
            <property name="message" value="Use ImmutableList.builder() for variable assignment."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="ImmutableMap\.Builder.*new ImmutableMap\.Builder"/>
            <property name="message" value="Use ImmutableMap.builder() for variable assignment."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="ImmutableSet\.Builder.*new ImmutableSet\.Builder"/>
            <property name="message" value="Use ImmutableSet.builder() for variable assignment."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="^\s*super\(\);"/>
            <property name="message" value="This is unnecessary; please delete."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="@return.*\.$"/>
            <property name="message" value="Please delete the period."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\s+$"/>
            <property name="message" value="Trailing whitespace is not allowed."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\? extends Object\W"/>
            <property name="message" value="Use ? rather than ? extends Object."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="(?i)log(ger)?\.(debug|info|warn|error)\(.*%[sd]"/>
            <property name="message" value="SLF4J loggers support '{}' style formatting."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\.printStackTrace\(\)"/>
            <property name="message" value="printStackTrace is not generally allowed."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="BanSystemOut"/>
            <property name="format" value="System\.out\."/>
            <property name="message"
                      value="Logging with System.out is not allowed because it has no metadata and can't be configured at runtime. Please use an SLF4J logger instead, e.g. log.info(&quot;Message&quot;)."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="BanSystemErr"/>
            <property name="format" value="System\.err\."/>
            <property name="message"
                      value="Logging with System.err is not allowed because it has no metadata and can't be configured at runtime. Please use an SLF4J logger instead, e.g. log.info(&quot;Message&quot;)."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\bCharsets\."/>
            <property name="message" value="Use JDK StandardCharsets instead of alternatives."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\bCharset.defaultCharset\("/>
            <property name="message" value="Use explicit charset (e.g. StandardCharsets.UTF_8) instead of default."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\bIOUtils\.toString\("/>
            <property name="message"
                      value="Prefer Guava''s [CharStreams,Files,Resources].toString to avoid charset/stream closing issues."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format"
                      value="(void setUp\(\))|(void setup\(\))|(void setupStatic\(\))|(void setUpStatic\(\))|(void beforeTest\(\))|(void teardown\(\))|(void tearDown\(\))|(void beforeStatic\(\))|(void afterStatic\(\))"/>
            <property name="message"
                      value="Test setup/teardown methods are called before(), beforeClass(), after(), afterClass(), but not setUp, teardown, etc."/>
        </module>
        <module name="RightCurly">
            <property name="option" value="same"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StaticVariableName"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuppressWarnings">
            <property name="format" value="serial"/>
        </module>
        <module name="SuppressWarningsHolder"/>
        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypecastParenPad"/>
        <module name="AvoidStarImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>
        <module name="UpperEll"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="ignoreEnhancedForColon" value="false"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>


        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="CyclomaticComplexity">
            <property name="switchBlockAsSingleDecisionPoint" value="true"/>
        </module>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test"/>
        </module>
        <module name="JavadocStyle"/>
        <module name="JavadocTagContinuationIndentation">
            <property name="offset" value="0"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodLength"/>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedTryDepth"/>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="ParameterName">
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="SummaryJavadocCheck">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>


    </module>
</module>
