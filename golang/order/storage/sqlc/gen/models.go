// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeliveryType string

const (
	DeliveryTypePICKUP  DeliveryType = "PICKUP"
	DeliveryTypeCOURIER DeliveryType = "COURIER"
)

func (e *DeliveryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryType(s)
	case string:
		*e = DeliveryType(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryType: %T", src)
	}
	return nil
}

type NullDeliveryType struct {
	DeliveryType DeliveryType
	Valid        bool // Valid is true if DeliveryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryType) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryType), nil
}

type OrderStatus string

const (
	OrderStatusCREATING     OrderStatus = "CREATING"
	OrderStatusCREATED      OrderStatus = "CREATED"
	OrderStatusAPPROVING    OrderStatus = "APPROVING"
	OrderStatusAPPROVED     OrderStatus = "APPROVED"
	OrderStatusRELEASING    OrderStatus = "RELEASING"
	OrderStatusRELEASED     OrderStatus = "RELEASED"
	OrderStatusINSUFFICIENT OrderStatus = "INSUFFICIENT"
	OrderStatusCANCELLING   OrderStatus = "CANCELLING"
	OrderStatusCANCELLED    OrderStatus = "CANCELLED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Delivery struct {
	OrderID string
	Address string
	Type    DeliveryType
}

type Item struct {
	ID      string
	OrderID string
	Amount  int32
}

type Order struct {
	ID                   string
	CreatedAt            pgtype.Timestamptz
	UpdatedAt            pgtype.Timestamptz
	Status               OrderStatus
	CustomerID           string
	ReserveID            pgtype.Text
	PaymentID            pgtype.Text
	PaymentTransactionID pgtype.Text
	ReserveTransactionID pgtype.Text
}
