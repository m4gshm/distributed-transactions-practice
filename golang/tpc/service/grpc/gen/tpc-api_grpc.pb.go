// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: tpc/v1/api/tpc-api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwoPhaseCommitService_ListActives_FullMethodName = "/tpc.v1.TwoPhaseCommitService/listActives"
	TwoPhaseCommitService_Commit_FullMethodName      = "/tpc.v1.TwoPhaseCommitService/commit"
	TwoPhaseCommitService_Rollback_FullMethodName    = "/tpc.v1.TwoPhaseCommitService/rollback"
)

// TwoPhaseCommitServiceClient is the client API for TwoPhaseCommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoPhaseCommitServiceClient interface {
	ListActives(ctx context.Context, in *TwoPhaseListActivesRequest, opts ...grpc.CallOption) (*TwoPhaseListActivesResponse, error)
	Commit(ctx context.Context, in *TwoPhaseCommitRequest, opts ...grpc.CallOption) (*TwoPhaseCommitResponse, error)
	Rollback(ctx context.Context, in *TwoPhaseRollbackRequest, opts ...grpc.CallOption) (*TwoPhaseRollbackResponse, error)
}

type twoPhaseCommitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoPhaseCommitServiceClient(cc grpc.ClientConnInterface) TwoPhaseCommitServiceClient {
	return &twoPhaseCommitServiceClient{cc}
}

func (c *twoPhaseCommitServiceClient) ListActives(ctx context.Context, in *TwoPhaseListActivesRequest, opts ...grpc.CallOption) (*TwoPhaseListActivesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwoPhaseListActivesResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_ListActives_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Commit(ctx context.Context, in *TwoPhaseCommitRequest, opts ...grpc.CallOption) (*TwoPhaseCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwoPhaseCommitResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Rollback(ctx context.Context, in *TwoPhaseRollbackRequest, opts ...grpc.CallOption) (*TwoPhaseRollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwoPhaseRollbackResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_Rollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoPhaseCommitServiceServer is the server API for TwoPhaseCommitService service.
// All implementations should embed UnimplementedTwoPhaseCommitServiceServer
// for forward compatibility.
type TwoPhaseCommitServiceServer interface {
	ListActives(context.Context, *TwoPhaseListActivesRequest) (*TwoPhaseListActivesResponse, error)
	Commit(context.Context, *TwoPhaseCommitRequest) (*TwoPhaseCommitResponse, error)
	Rollback(context.Context, *TwoPhaseRollbackRequest) (*TwoPhaseRollbackResponse, error)
}

// UnimplementedTwoPhaseCommitServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwoPhaseCommitServiceServer struct{}

func (UnimplementedTwoPhaseCommitServiceServer) ListActives(context.Context, *TwoPhaseListActivesRequest) (*TwoPhaseListActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActives not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Commit(context.Context, *TwoPhaseCommitRequest) (*TwoPhaseCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Rollback(context.Context, *TwoPhaseRollbackRequest) (*TwoPhaseRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) testEmbeddedByValue() {}

// UnsafeTwoPhaseCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoPhaseCommitServiceServer will
// result in compilation errors.
type UnsafeTwoPhaseCommitServiceServer interface {
	mustEmbedUnimplementedTwoPhaseCommitServiceServer()
}

func RegisterTwoPhaseCommitServiceServer(s grpc.ServiceRegistrar, srv TwoPhaseCommitServiceServer) {
	// If the following call pancis, it indicates UnimplementedTwoPhaseCommitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwoPhaseCommitService_ServiceDesc, srv)
}

func _TwoPhaseCommitService_ListActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPhaseListActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).ListActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_ListActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).ListActives(ctx, req.(*TwoPhaseListActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPhaseCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Commit(ctx, req.(*TwoPhaseCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPhaseRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Rollback(ctx, req.(*TwoPhaseRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoPhaseCommitService_ServiceDesc is the grpc.ServiceDesc for TwoPhaseCommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoPhaseCommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpc.v1.TwoPhaseCommitService",
	HandlerType: (*TwoPhaseCommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listActives",
			Handler:    _TwoPhaseCommitService_ListActives_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _TwoPhaseCommitService_Commit_Handler,
		},
		{
			MethodName: "rollback",
			Handler:    _TwoPhaseCommitService_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tpc/v1/api/tpc-api.proto",
}
