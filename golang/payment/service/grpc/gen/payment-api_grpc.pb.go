// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: payment/v1/api/payment-api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_Create_FullMethodName  = "/payment.v1.PaymentService/Create"
	PaymentService_Approve_FullMethodName = "/payment.v1.PaymentService/Approve"
	PaymentService_Cancel_FullMethodName  = "/payment.v1.PaymentService/Cancel"
	PaymentService_Pay_FullMethodName     = "/payment.v1.PaymentService/Pay"
	PaymentService_Get_FullMethodName     = "/payment.v1.PaymentService/Get"
	PaymentService_List_FullMethodName    = "/payment.v1.PaymentService/List"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	Create(ctx context.Context, in *PaymentCreateRequest, opts ...grpc.CallOption) (*PaymentCreateResponse, error)
	Approve(ctx context.Context, in *PaymentApproveRequest, opts ...grpc.CallOption) (*PaymentApproveResponse, error)
	Cancel(ctx context.Context, in *PaymentCancelRequest, opts ...grpc.CallOption) (*PaymentCancelResponse, error)
	Pay(ctx context.Context, in *PaymentPayRequest, opts ...grpc.CallOption) (*PaymentPayResponse, error)
	Get(ctx context.Context, in *PaymentGetRequest, opts ...grpc.CallOption) (*PaymentGetResponse, error)
	List(ctx context.Context, in *PaymentListRequest, opts ...grpc.CallOption) (*PaymentListResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) Create(ctx context.Context, in *PaymentCreateRequest, opts ...grpc.CallOption) (*PaymentCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentCreateResponse)
	err := c.cc.Invoke(ctx, PaymentService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Approve(ctx context.Context, in *PaymentApproveRequest, opts ...grpc.CallOption) (*PaymentApproveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentApproveResponse)
	err := c.cc.Invoke(ctx, PaymentService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Cancel(ctx context.Context, in *PaymentCancelRequest, opts ...grpc.CallOption) (*PaymentCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentCancelResponse)
	err := c.cc.Invoke(ctx, PaymentService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Pay(ctx context.Context, in *PaymentPayRequest, opts ...grpc.CallOption) (*PaymentPayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentPayResponse)
	err := c.cc.Invoke(ctx, PaymentService_Pay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Get(ctx context.Context, in *PaymentGetRequest, opts ...grpc.CallOption) (*PaymentGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentGetResponse)
	err := c.cc.Invoke(ctx, PaymentService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) List(ctx context.Context, in *PaymentListRequest, opts ...grpc.CallOption) (*PaymentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentListResponse)
	err := c.cc.Invoke(ctx, PaymentService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	Create(context.Context, *PaymentCreateRequest) (*PaymentCreateResponse, error)
	Approve(context.Context, *PaymentApproveRequest) (*PaymentApproveResponse, error)
	Cancel(context.Context, *PaymentCancelRequest) (*PaymentCancelResponse, error)
	Pay(context.Context, *PaymentPayRequest) (*PaymentPayResponse, error)
	Get(context.Context, *PaymentGetRequest) (*PaymentGetResponse, error)
	List(context.Context, *PaymentListRequest) (*PaymentListResponse, error)
}

// UnimplementedPaymentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) Create(context.Context, *PaymentCreateRequest) (*PaymentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPaymentServiceServer) Approve(context.Context, *PaymentApproveRequest) (*PaymentApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedPaymentServiceServer) Cancel(context.Context, *PaymentCancelRequest) (*PaymentCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedPaymentServiceServer) Pay(context.Context, *PaymentPayRequest) (*PaymentPayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedPaymentServiceServer) Get(context.Context, *PaymentGetRequest) (*PaymentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentServiceServer) List(context.Context, *PaymentListRequest) (*PaymentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Create(ctx, req.(*PaymentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Approve(ctx, req.(*PaymentApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Cancel(ctx, req.(*PaymentCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Pay(ctx, req.(*PaymentPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Get(ctx, req.(*PaymentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).List(ctx, req.(*PaymentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PaymentService_Create_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _PaymentService_Approve_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _PaymentService_Cancel_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _PaymentService_Pay_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PaymentService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/api/payment-api.proto",
}
