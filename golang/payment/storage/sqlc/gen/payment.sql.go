// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payment.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAllPayments = `-- name: FindAllPayments :many
SELECT id, external_ref, client_id, amount, insufficient, status, created_at, updated_at
FROM payment
`

func (q *Queries) FindAllPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, findAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.ExternalRef,
			&i.ClientID,
			&i.Amount,
			&i.Insufficient,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaymentByID = `-- name: FindPaymentByID :one
SELECT id, external_ref, client_id, amount, insufficient, status, created_at, updated_at
FROM payment
WHERE id = $1
`

func (q *Queries) FindPaymentByID(ctx context.Context, id string) (Payment, error) {
	row := q.db.QueryRow(ctx, findPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalRef,
		&i.ClientID,
		&i.Amount,
		&i.Insufficient,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payment
SET status = $1,
    insufficient = $2,
    updated_at = COALESCE($3, NOW())
WHERE id = $4
`

type UpdatePaymentStatusParams struct {
	Status       PaymentStatus
	Insufficient *float64
	UpdatedAt    pgtype.Timestamptz
	ID           string
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus,
		arg.Status,
		arg.Insufficient,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const upsertPayment = `-- name: UpsertPayment :exec
INSERT INTO payment (
        id,
        created_at,
        external_ref,
        client_id,
        status,
        amount,
        insufficient
    )
VALUES ($1, $2, $3, $4, $5, $6, $7) ON CONFLICT(id) DO
UPDATE
SET updated_at = COALESCE($8, NOW()),
    status = $5,
    amount = $6,
    insufficient = $7
`

type UpsertPaymentParams struct {
	ID           string
	CreatedAt    pgtype.Timestamptz
	ExternalRef  string
	ClientID     string
	Status       PaymentStatus
	Amount       float64
	Insufficient *float64
	UpdatedAt    pgtype.Timestamptz
}

func (q *Queries) UpsertPayment(ctx context.Context, arg UpsertPaymentParams) error {
	_, err := q.db.Exec(ctx, upsertPayment,
		arg.ID,
		arg.CreatedAt,
		arg.ExternalRef,
		arg.ClientID,
		arg.Status,
		arg.Amount,
		arg.Insufficient,
		arg.UpdatedAt,
	)
	return err
}
