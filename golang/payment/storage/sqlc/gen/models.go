// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PaymentStatus string

const (
	PaymentStatusCREATED      PaymentStatus = "CREATED"
	PaymentStatusHOLD         PaymentStatus = "HOLD"
	PaymentStatusINSUFFICIENT PaymentStatus = "INSUFFICIENT"
	PaymentStatusPAID         PaymentStatus = "PAID"
	PaymentStatusCANCELLED    PaymentStatus = "CANCELLED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type Account struct {
	ClientID  string
	Amount    float64
	Locked    float64
	UpdatedAt pgtype.Timestamptz
}

type Payment struct {
	ID           string
	ExternalRef  string
	ClientID     string
	Amount       float64
	Insufficient *float64
	Status       PaymentStatus
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}
