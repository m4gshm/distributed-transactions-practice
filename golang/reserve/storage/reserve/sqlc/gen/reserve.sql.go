// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reserve.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteReserveItems = `-- name: DeleteReserveItems :exec
DELETE FROM
  reserve_item
WHERE
  reserve_id = $1
`

func (q *Queries) DeleteReserveItems(ctx context.Context, reserveID string) error {
	_, err := q.db.Exec(ctx, deleteReserveItems, reserveID)
	return err
}

const findAllReserves = `-- name: FindAllReserves :many
SELECT
  id, external_ref, status, created_at, updated_at
FROM
  reserve
`

func (q *Queries) FindAllReserves(ctx context.Context) ([]Reserve, error) {
	rows, err := q.db.Query(ctx, findAllReserves)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reserve
	for rows.Next() {
		var i Reserve
		if err := rows.Scan(
			&i.ID,
			&i.ExternalRef,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findItemsByReserveID = `-- name: FindItemsByReserveID :many
SELECT
  id, reserve_id, amount, insufficient, reserved
FROM
  reserve_item
WHERE
  reserve_id = $1
`

func (q *Queries) FindItemsByReserveID(ctx context.Context, reserveID string) ([]ReserveItem, error) {
	rows, err := q.db.Query(ctx, findItemsByReserveID, reserveID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReserveItem
	for rows.Next() {
		var i ReserveItem
		if err := rows.Scan(
			&i.ID,
			&i.ReserveID,
			&i.Amount,
			&i.Insufficient,
			&i.Reserved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findReserveByID = `-- name: FindReserveByID :one
SELECT
  id, external_ref, status, created_at, updated_at
FROM
  reserve
WHERE
  id = $1
`

func (q *Queries) FindReserveByID(ctx context.Context, id string) (Reserve, error) {
	row := q.db.QueryRow(ctx, findReserveByID, id)
	var i Reserve
	err := row.Scan(
		&i.ID,
		&i.ExternalRef,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertReserve = `-- name: UpsertReserve :exec
INSERT INTO
  reserve (id, external_ref, status, created_at, updated_at)
VALUES
  ($1, $2, $3, $4, $5) ON CONFLICT (id) DO
UPDATE
SET
  status = EXCLUDED.status,
  updated_at = COALESCE(EXCLUDED.updated_at, reserve.updated_at)
`

type UpsertReserveParams struct {
	ID          string
	ExternalRef *string
	Status      ReserveStatus
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) UpsertReserve(ctx context.Context, arg UpsertReserveParams) error {
	_, err := q.db.Exec(ctx, upsertReserve,
		arg.ID,
		arg.ExternalRef,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const upsertReserveItem = `-- name: UpsertReserveItem :exec
INSERT INTO
  reserve_item (id, reserve_id, amount, reserved, insufficient)
VALUES
  ($1, $2, $3, $4, $5) ON CONFLICT (id, reserve_id) DO
UPDATE
SET
  reserved = COALESCE($4, reserve_item.reserved),
  insufficient = COALESCE($5, reserve_item.insufficient)
`

type UpsertReserveItemParams struct {
	ID           string
	ReserveID    string
	Amount       int32
	Reserved     *bool
	Insufficient *int32
}

func (q *Queries) UpsertReserveItem(ctx context.Context, arg UpsertReserveItemParams) error {
	_, err := q.db.Exec(ctx, upsertReserveItem,
		arg.ID,
		arg.ReserveID,
		arg.Amount,
		arg.Reserved,
		arg.Insufficient,
	)
	return err
}
