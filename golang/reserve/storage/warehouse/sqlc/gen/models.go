// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ReserveStatus string

const (
	ReserveStatusCREATED      ReserveStatus = "CREATED"
	ReserveStatusAPPROVED     ReserveStatus = "APPROVED"
	ReserveStatusRELEASED     ReserveStatus = "RELEASED"
	ReserveStatusINSUFFICIENT ReserveStatus = "INSUFFICIENT"
	ReserveStatusCANCELLED    ReserveStatus = "CANCELLED"
)

func (e *ReserveStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReserveStatus(s)
	case string:
		*e = ReserveStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReserveStatus: %T", src)
	}
	return nil
}

type NullReserveStatus struct {
	ReserveStatus ReserveStatus
	Valid         bool // Valid is true if ReserveStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReserveStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReserveStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReserveStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReserveStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReserveStatus), nil
}

type Reserve struct {
	ID          string
	ExternalRef *string
	Status      ReserveStatus
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type ReserveItem struct {
	ID           string
	ReserveID    string
	Amount       int32
	Insufficient *int32
	Reserved     *bool
}

type WarehouseItem struct {
	ID        string
	Amount    int32
	Reserved  int32
	UnitCost  float64
	UpdatedAt pgtype.Timestamptz
}
