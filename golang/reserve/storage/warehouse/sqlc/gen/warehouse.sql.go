// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: warehouse.sql

package gen

import (
	"context"
)

const DecrementAmountAndReserved = `-- name: DecrementAmountAndReserved :exec
UPDATE
  warehouse_item
SET
  amount = amount - $2,
  reserved = reserved - $2
WHERE
  id = $1
`

type DecrementAmountAndReservedParams struct {
	ID     string
	Amount int32
}

func (q *Queries) DecrementAmountAndReserved(ctx context.Context, arg DecrementAmountAndReservedParams) error {
	_, err := q.db.Exec(ctx, DecrementAmountAndReserved, arg.ID, arg.Amount)
	return err
}

const DecrementReserved = `-- name: DecrementReserved :exec
UPDATE
  warehouse_item
SET
  reserved = reserved - $2
WHERE
  id = $1
`

type DecrementReservedParams struct {
	ID       string
	Reserved int32
}

func (q *Queries) DecrementReserved(ctx context.Context, arg DecrementReservedParams) error {
	_, err := q.db.Exec(ctx, DecrementReserved, arg.ID, arg.Reserved)
	return err
}

const IncrementReserved = `-- name: IncrementReserved :exec
UPDATE
  warehouse_item
SET
  reserved = reserved + $2
WHERE
  id = $1
`

type IncrementReservedParams struct {
	ID       string
	Reserved int32
}

func (q *Queries) IncrementReserved(ctx context.Context, arg IncrementReservedParams) error {
	_, err := q.db.Exec(ctx, IncrementReserved, arg.ID, arg.Reserved)
	return err
}

const SelectAllItems = `-- name: SelectAllItems :many
SELECT
  id, amount, reserved, unit_cost, updated_at
FROM
  warehouse_item
`

func (q *Queries) SelectAllItems(ctx context.Context) ([]WarehouseItem, error) {
	rows, err := q.db.Query(ctx, SelectAllItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WarehouseItem
	for rows.Next() {
		var i WarehouseItem
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Reserved,
			&i.UnitCost,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SelectItemByID = `-- name: SelectItemByID :one
SELECT
  id, amount, reserved, unit_cost, updated_at
FROM
  warehouse_item
WHERE
  id = $1
`

func (q *Queries) SelectItemByID(ctx context.Context, id string) (WarehouseItem, error) {
	row := q.db.QueryRow(ctx, SelectItemByID, id)
	var i WarehouseItem
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Reserved,
		&i.UnitCost,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectItemByIDForUpdate = `-- name: SelectItemByIDForUpdate :one
SELECT
  id, amount, reserved, unit_cost, updated_at
FROM
  warehouse_item
WHERE
  id = $1 FOR
UPDATE
`

func (q *Queries) SelectItemByIDForUpdate(ctx context.Context, id string) (WarehouseItem, error) {
	row := q.db.QueryRow(ctx, SelectItemByIDForUpdate, id)
	var i WarehouseItem
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Reserved,
		&i.UnitCost,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateAmountAndReserved = `-- name: UpdateAmountAndReserved :exec
UPDATE
  warehouse_item
SET
  amount = COALESCE($2, amount),
  reserved = COALESCE($3, reserved)
WHERE
  id = $1
`

type UpdateAmountAndReservedParams struct {
	ID       string
	Amount   int32
	Reserved int32
}

func (q *Queries) UpdateAmountAndReserved(ctx context.Context, arg UpdateAmountAndReservedParams) error {
	_, err := q.db.Exec(ctx, UpdateAmountAndReserved, arg.ID, arg.Amount, arg.Reserved)
	return err
}
