// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: warehouse/v1/api/warehouse_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarehouseItemService_GetItemCost_FullMethodName = "/warehouse.v1.WarehouseItemService/GetItemCost"
	WarehouseItemService_ItemList_FullMethodName    = "/warehouse.v1.WarehouseItemService/ItemList"
	WarehouseItemService_TopUp_FullMethodName       = "/warehouse.v1.WarehouseItemService/TopUp"
)

// WarehouseItemServiceClient is the client API for WarehouseItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseItemServiceClient interface {
	GetItemCost(ctx context.Context, in *GetItemCostRequest, opts ...grpc.CallOption) (*GetItemCostResponse, error)
	ItemList(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*ItemListResponse, error)
	TopUp(ctx context.Context, in *ItemTopUpRequest, opts ...grpc.CallOption) (*ItemTopUpResponse, error)
}

type warehouseItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseItemServiceClient(cc grpc.ClientConnInterface) WarehouseItemServiceClient {
	return &warehouseItemServiceClient{cc}
}

func (c *warehouseItemServiceClient) GetItemCost(ctx context.Context, in *GetItemCostRequest, opts ...grpc.CallOption) (*GetItemCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemCostResponse)
	err := c.cc.Invoke(ctx, WarehouseItemService_GetItemCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseItemServiceClient) ItemList(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*ItemListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemListResponse)
	err := c.cc.Invoke(ctx, WarehouseItemService_ItemList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseItemServiceClient) TopUp(ctx context.Context, in *ItemTopUpRequest, opts ...grpc.CallOption) (*ItemTopUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemTopUpResponse)
	err := c.cc.Invoke(ctx, WarehouseItemService_TopUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseItemServiceServer is the server API for WarehouseItemService service.
// All implementations should embed UnimplementedWarehouseItemServiceServer
// for forward compatibility.
type WarehouseItemServiceServer interface {
	GetItemCost(context.Context, *GetItemCostRequest) (*GetItemCostResponse, error)
	ItemList(context.Context, *ItemListRequest) (*ItemListResponse, error)
	TopUp(context.Context, *ItemTopUpRequest) (*ItemTopUpResponse, error)
}

// UnimplementedWarehouseItemServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarehouseItemServiceServer struct{}

func (UnimplementedWarehouseItemServiceServer) GetItemCost(context.Context, *GetItemCostRequest) (*GetItemCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemCost not implemented")
}
func (UnimplementedWarehouseItemServiceServer) ItemList(context.Context, *ItemListRequest) (*ItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemList not implemented")
}
func (UnimplementedWarehouseItemServiceServer) TopUp(context.Context, *ItemTopUpRequest) (*ItemTopUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUp not implemented")
}
func (UnimplementedWarehouseItemServiceServer) testEmbeddedByValue() {}

// UnsafeWarehouseItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseItemServiceServer will
// result in compilation errors.
type UnsafeWarehouseItemServiceServer interface {
	mustEmbedUnimplementedWarehouseItemServiceServer()
}

func RegisterWarehouseItemServiceServer(s grpc.ServiceRegistrar, srv WarehouseItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedWarehouseItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarehouseItemService_ServiceDesc, srv)
}

func _WarehouseItemService_GetItemCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseItemServiceServer).GetItemCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseItemService_GetItemCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseItemServiceServer).GetItemCost(ctx, req.(*GetItemCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseItemService_ItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseItemServiceServer).ItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseItemService_ItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseItemServiceServer).ItemList(ctx, req.(*ItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseItemService_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemTopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseItemServiceServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseItemService_TopUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseItemServiceServer).TopUp(ctx, req.(*ItemTopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseItemService_ServiceDesc is the grpc.ServiceDesc for WarehouseItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse.v1.WarehouseItemService",
	HandlerType: (*WarehouseItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemCost",
			Handler:    _WarehouseItemService_GetItemCost_Handler,
		},
		{
			MethodName: "ItemList",
			Handler:    _WarehouseItemService_ItemList_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _WarehouseItemService_TopUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse/v1/api/warehouse_service.proto",
}
