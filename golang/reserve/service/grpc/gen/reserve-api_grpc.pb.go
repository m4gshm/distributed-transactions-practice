// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: reserve/v1/api/reserve-api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReserveService_Create_FullMethodName  = "/reserve.v1.ReserveService/Create"
	ReserveService_Approve_FullMethodName = "/reserve.v1.ReserveService/Approve"
	ReserveService_Release_FullMethodName = "/reserve.v1.ReserveService/Release"
	ReserveService_Cancel_FullMethodName  = "/reserve.v1.ReserveService/Cancel"
	ReserveService_Get_FullMethodName     = "/reserve.v1.ReserveService/Get"
	ReserveService_List_FullMethodName    = "/reserve.v1.ReserveService/List"
)

// ReserveServiceClient is the client API for ReserveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReserveServiceClient interface {
	Create(ctx context.Context, in *ReserveCreateRequest, opts ...grpc.CallOption) (*ReserveCreateResponse, error)
	Approve(ctx context.Context, in *ReserveApproveRequest, opts ...grpc.CallOption) (*ReserveApproveResponse, error)
	Release(ctx context.Context, in *ReserveReleaseRequest, opts ...grpc.CallOption) (*ReserveReleaseResponse, error)
	Cancel(ctx context.Context, in *ReserveCancelRequest, opts ...grpc.CallOption) (*ReserveCancelResponse, error)
	Get(ctx context.Context, in *ReserveGetRequest, opts ...grpc.CallOption) (*ReserveGetResponse, error)
	List(ctx context.Context, in *ReserveListRequest, opts ...grpc.CallOption) (*ReserveListResponse, error)
}

type reserveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReserveServiceClient(cc grpc.ClientConnInterface) ReserveServiceClient {
	return &reserveServiceClient{cc}
}

func (c *reserveServiceClient) Create(ctx context.Context, in *ReserveCreateRequest, opts ...grpc.CallOption) (*ReserveCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveCreateResponse)
	err := c.cc.Invoke(ctx, ReserveService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) Approve(ctx context.Context, in *ReserveApproveRequest, opts ...grpc.CallOption) (*ReserveApproveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveApproveResponse)
	err := c.cc.Invoke(ctx, ReserveService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) Release(ctx context.Context, in *ReserveReleaseRequest, opts ...grpc.CallOption) (*ReserveReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveReleaseResponse)
	err := c.cc.Invoke(ctx, ReserveService_Release_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) Cancel(ctx context.Context, in *ReserveCancelRequest, opts ...grpc.CallOption) (*ReserveCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveCancelResponse)
	err := c.cc.Invoke(ctx, ReserveService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) Get(ctx context.Context, in *ReserveGetRequest, opts ...grpc.CallOption) (*ReserveGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveGetResponse)
	err := c.cc.Invoke(ctx, ReserveService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) List(ctx context.Context, in *ReserveListRequest, opts ...grpc.CallOption) (*ReserveListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveListResponse)
	err := c.cc.Invoke(ctx, ReserveService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReserveServiceServer is the server API for ReserveService service.
// All implementations should embed UnimplementedReserveServiceServer
// for forward compatibility.
type ReserveServiceServer interface {
	Create(context.Context, *ReserveCreateRequest) (*ReserveCreateResponse, error)
	Approve(context.Context, *ReserveApproveRequest) (*ReserveApproveResponse, error)
	Release(context.Context, *ReserveReleaseRequest) (*ReserveReleaseResponse, error)
	Cancel(context.Context, *ReserveCancelRequest) (*ReserveCancelResponse, error)
	Get(context.Context, *ReserveGetRequest) (*ReserveGetResponse, error)
	List(context.Context, *ReserveListRequest) (*ReserveListResponse, error)
}

// UnimplementedReserveServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReserveServiceServer struct{}

func (UnimplementedReserveServiceServer) Create(context.Context, *ReserveCreateRequest) (*ReserveCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReserveServiceServer) Approve(context.Context, *ReserveApproveRequest) (*ReserveApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedReserveServiceServer) Release(context.Context, *ReserveReleaseRequest) (*ReserveReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedReserveServiceServer) Cancel(context.Context, *ReserveCancelRequest) (*ReserveCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedReserveServiceServer) Get(context.Context, *ReserveGetRequest) (*ReserveGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReserveServiceServer) List(context.Context, *ReserveListRequest) (*ReserveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReserveServiceServer) testEmbeddedByValue() {}

// UnsafeReserveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReserveServiceServer will
// result in compilation errors.
type UnsafeReserveServiceServer interface {
	mustEmbedUnimplementedReserveServiceServer()
}

func RegisterReserveServiceServer(s grpc.ServiceRegistrar, srv ReserveServiceServer) {
	// If the following call pancis, it indicates UnimplementedReserveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReserveService_ServiceDesc, srv)
}

func _ReserveService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).Create(ctx, req.(*ReserveCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).Approve(ctx, req.(*ReserveApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).Release(ctx, req.(*ReserveReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).Cancel(ctx, req.(*ReserveCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).Get(ctx, req.(*ReserveGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).List(ctx, req.(*ReserveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReserveService_ServiceDesc is the grpc.ServiceDesc for ReserveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReserveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserve.v1.ReserveService",
	HandlerType: (*ReserveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReserveService_Create_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _ReserveService_Approve_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _ReserveService_Release_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ReserveService_Cancel_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReserveService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ReserveService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserve/v1/api/reserve-api.proto",
}
