/*
 * This file is generated by jOOQ.
 */
package io.github.m4gshm.reactive.idempotent.consumer.storage.tables;

import io.github.m4gshm.reactive.idempotent.consumer.storage.tables.records.InputMessagesRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InputMessages extends TableImpl<InputMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>input_messages</code>
     */
    public static final InputMessages INPUT_MESSAGES = new InputMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InputMessagesRecord> getRecordType() {
        return InputMessagesRecord.class;
    }

    /**
     * The column <code>input_messages.message_id</code>.
     */
    public final TableField<InputMessagesRecord,
                            String> MESSAGE_ID = createField(DSL.name("message_id"),
                                                             SQLDataType.CLOB.nullable(false),
                                                             this,
                                                             "");

    /**
     * The column <code>input_messages.subscriber_id</code>.
     */
    public final TableField<InputMessagesRecord,
                            String> SUBSCRIBER_ID = createField(DSL.name("subscriber_id"),
                                                                SQLDataType.CLOB.nullable(false),
                                                                this,
                                                                "");

    /**
     * The column <code>input_messages.created_at</code>.
     */
    public final TableField<InputMessagesRecord,
                            OffsetDateTime> CREATED_AT =
                                                       createField(DSL.name("created_at"),
                                                                   SQLDataType.TIMESTAMPWITHTIMEZONE(6)
                                                                              .nullable(false)
                                                                              .defaultValue(DSL.field(DSL.raw("now()"),
                                                                                                      SQLDataType.TIMESTAMPWITHTIMEZONE)),
                                                                   this,
                                                                   "");

    private InputMessages(Name alias,
                          Table<InputMessagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InputMessages(Name alias,
                          Table<InputMessagesRecord> aliased,
                          Field<?>[] parameters,
                          Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>input_messages</code> table reference
     */
    public InputMessages(String alias) {
        this(DSL.name(alias), INPUT_MESSAGES);
    }

    /**
     * Create an aliased <code>input_messages</code> table reference
     */
    public InputMessages(Name alias) {
        this(alias, INPUT_MESSAGES);
    }

    /**
     * Create a <code>input_messages</code> table reference
     */
    public InputMessages() {
        this(DSL.name("input_messages"), null);
    }

    @Override
    public UniqueKey<InputMessagesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(InputMessages.INPUT_MESSAGES,
                                        DSL.name("input_messages_pkey"),
                                        new TableField[] {
                                                           InputMessages.INPUT_MESSAGES.MESSAGE_ID,
                                                           InputMessages.INPUT_MESSAGES.SUBSCRIBER_ID },
                                        true);
    }

    @Override
    public InputMessages as(String alias) {
        return new InputMessages(DSL.name(alias), this);
    }

    @Override
    public InputMessages as(Name alias) {
        return new InputMessages(alias, this);
    }

    @Override
    public InputMessages as(Table<?> alias) {
        return new InputMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InputMessages rename(String name) {
        return new InputMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InputMessages rename(Name name) {
        return new InputMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InputMessages rename(Table<?> name) {
        return new InputMessages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InputMessages where(Condition condition) {
        return new InputMessages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InputMessages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InputMessages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InputMessages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InputMessages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InputMessages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InputMessages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InputMessages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InputMessages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InputMessages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
